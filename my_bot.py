import requests
import time
import threading

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = '8403421825:AAH9dpr4wUydrj3bCDsDpR21MunzPwh91d4'
API_URL = f'https://api.telegram.org/bot{TOKEN}/'
user_state = {}  # user_id: current_state

# === –£—Ç–∏–ª–∏—Ç—ã ===
def send_message(chat_id, text, reply_markup=None):
    payload = {
        'chat_id': chat_id,
        'text': text
    }
    if reply_markup:
        payload['reply_markup'] = reply_markup
    requests.post(API_URL + 'sendMessage', json=payload)

def get_updates(offset=None):
    params = {'timeout': 100, 'offset': offset}
    response = requests.get(API_URL + 'getUpdates', params=params)
    return response.json()['result']

# === –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ===
def handle_update(update):
    message = update.get('message')
    if not message:
        return

    chat_id = message['chat']['id']
    user_id = message['from']['id']
    text = message.get('text', '')

    state = user_state.get(user_id, 'start')

    if state == 'start':
        send_message(
            chat_id,
            "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç –ø—Ä–æ–µ–∫—Ç–∞ LINIA. –ú—ã –ø–æ–º–æ–≥–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞–º –±–∏–∑–Ω–µ—Å–∞ –≤—ã–π—Ç–∏ –∏–∑ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–∫–∏ –∏ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–∏—Å—Ç–µ–º—É, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –ø–µ—Ä–µ–≥—Ä—É–∑–∞. –°–∫–∞–∂–∏, —á—Ç–æ –±–ª–∏–∂–µ –∫ —Ç–≤–æ–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏?",
            reply_markup={
                "keyboard": [
                    ["–•–æ—á—É –Ω–∞–≤–µ—Å—Ç–∏ –ø–æ—Ä—è–¥–æ–∫ –≤ –±–∏–∑–Ω–µ—Å–µ"],
                    ["–•–æ—á—É –ø—Ä–æ–π—Ç–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É"],
                    ["–•–æ—á—É –Ω–∞—á–∞—Ç—å —Å –Ω—É–ª—è"]
                ],
                "one_time_keyboard": True,
                "resize_keyboard": True
            }
        )
        user_state[user_id] = 'segment'

    elif state == 'segment':
        if text == "–•–æ—á—É –Ω–∞–≤–µ—Å—Ç–∏ –ø–æ—Ä—è–¥–æ–∫ –≤ –±–∏–∑–Ω–µ—Å–µ":
            send_message(chat_id, "üìò –í–æ—Ç PDF —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ —à–∞–≥–∞–º–∏: https://example.com/system")
        elif text == "–•–æ—á—É –ø—Ä–æ–π—Ç–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É":
            send_message(chat_id, "üìù –ü—Ä–æ–π–¥–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É: https://example.com/diagnostic")
        elif text == "–•–æ—á—É –Ω–∞—á–∞—Ç—å —Å –Ω—É–ª—è":
            send_message(chat_id, "üé• –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ: https://example.com/start-from-zero")
        else:
            send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤—ã—à–µ üëÜ")
            return

        # –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Äî CTA
        send_message(
            chat_id,
            "–•–æ—á–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É?",
            reply_markup={
                "keyboard": [
                    ["–î–∞, —Ö–æ—á—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"],
                    ["–ü–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤(–∞)"]
                ],
                "one_time_keyboard": True,
                "resize_keyboard": True
            }
        )
        user_state[user_id] = 'cta'

        # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–æ–∂–∏–º —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞
        threading.Thread(target=delayed_reminder, args=(chat_id,), daemon=True).start()

    elif state == 'cta':
        if "–î–∞" in text:
            send_message(chat_id, "üöÄ –û—Ç–ª–∏—á–Ω–æ! –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ —É—á–∞—Å—Ç–∏–µ: https://example.com/webinar")
        else:
            send_message(chat_id, "–•–æ—Ä–æ—à–æ! –ù–∞–ø–æ–º–Ω—é —Ç–µ–±–µ —á—É—Ç—å –ø–æ–∑–∂–µ.")
        user_state[user_id] = 'done'

def delayed_reminder(chat_id):
    time.sleep(60 * 60 * 24)  # 24 —á–∞—Å–∞
    send_message(chat_id, "–ù–∞–ø–æ–º–∏–Ω–∞—é ‚Äî —Ç—ã –º–æ–∂–µ—à—å –≤—Å—ë –µ—â—ë –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ! üí°")

# === –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª ===
def main():
    offset = None
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è...")
    while True:
        try:
            updates = get_updates(offset)
            for update in updates:
                handle_update(update)
                offset = update['update_id'] + 1
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            time.sleep(5)

if __name__ == '__main__':
    main()
